     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    17 00000000                                 		GLOBAL	_asm_inthandler27, _asm_inthandler2c
    18 00000000                                 		GLOBAL	_memtest_sub
    19 00000000                                 		GLOBAL	_farjmp, _farcall
    20 00000000                                 		GLOBAL	_asm_hrb_api
    21 00000000                                 		EXTERN	_inthandler20, _inthandler21
    22 00000000                                 		EXTERN	_inthandler27, _inthandler2c
    23 00000000                                 		EXTERN	_hrb_api
    24 00000000                                 
    25                                          [SECTION .text]
    26 00000000                                 
    27 00000000                                 _io_hlt:	; void io_hlt(void);
    28 00000000 F4                              		HLT
    29 00000001 C3                              		RET
    30 00000002                                 
    31 00000002                                 _io_cli:	; void io_cli(void);
    32 00000002 FA                              		CLI
    33 00000003 C3                              		RET
    34 00000004                                 
    35 00000004                                 _io_sti:	; void io_sti(void);
    36 00000004 FB                              		STI
    37 00000005 C3                              		RET
    38 00000006                                 
    39 00000006                                 _io_stihlt:	; void io_stihlt(void);
    40 00000006 FB                              		STI
    41 00000007 F4                              		HLT
    42 00000008 C3                              		RET
    43 00000009                                 
    44 00000009                                 _io_in8:	; int io_in8(int port);
    45 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    46 0000000D B8 00000000                     		MOV		EAX,0
    47 00000012 EC                              		IN		AL,DX
    48 00000013 C3                              		RET
    49 00000014                                 
    50 00000014                                 _io_in16:	; int io_in16(int port);
    51 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    52 00000018 B8 00000000                     		MOV		EAX,0
    53 0000001D 66 ED                           		IN		AX,DX
    54 0000001F C3                              		RET
    55 00000020                                 
    56 00000020                                 _io_in32:	; int io_in32(int port);
    57 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    58 00000024 ED                              		IN		EAX,DX
    59 00000025 C3                              		RET
    60 00000026                                 
    61 00000026                                 _io_out8:	; void io_out8(int port, int data);
    62 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    63 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    64 0000002E EE                              		OUT		DX,AL
    65 0000002F C3                              		RET
    66 00000030                                 
    67 00000030                                 _io_out16:	; void io_out16(int port, int data);
    68 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    69 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    70 00000038 66 EF                           		OUT		DX,AX
    71 0000003A C3                              		RET
    72 0000003B                                 
    73 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    74 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    75 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    76 00000043 EF                              		OUT		DX,EAX
    77 00000044 C3                              		RET
    78 00000045                                 
    79 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    80 00000045 9C                              		PUSHFD		; PUSH EFLAGS という意味
    81 00000046 58                              		POP		EAX
    82 00000047 C3                              		RET
    83 00000048                                 
    84 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    85 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    86 0000004C 50                              		PUSH	EAX
    87 0000004D 9D                              		POPFD		; POP EFLAGS という意味
    88 0000004E C3                              		RET
    89 0000004F                                 
    90 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    91 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    92 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    93 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    94 0000005E C3                              		RET
    95 0000005F                                 
    96 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    97 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    98 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    99 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   100 0000006E C3                              		RET
   101 0000006F                                 
   102 0000006F                                 _load_cr0:		; int load_cr0(void);
   103 0000006F 0F 20 C0                        		MOV		EAX,CR0
   104 00000072 C3                              		RET
   105 00000073                                 
   106 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   107 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   108 00000077 0F 22 C0                        		MOV		CR0,EAX
   109 0000007A C3                              		RET
   110 0000007B                                 
   111 0000007B                                 _load_tr:		; void load_tr(int tr);
   112 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   113 00000080 C3                              		RET
   114 00000081                                 
   115 00000081                                 _asm_inthandler20:
   116 00000081 06                              		PUSH	ES
   117 00000082 1E                              		PUSH	DS
   118 00000083 60                              		PUSHAD
   119 00000084 89 E0                           		MOV		EAX,ESP
   120 00000086 50                              		PUSH	EAX
   121 00000087 66 8C D0                        		MOV		AX,SS
   122 0000008A 8E D8                           		MOV		DS,AX
   123 0000008C 8E C0                           		MOV		ES,AX
   124 0000008E E8 [00000000]                   		CALL	_inthandler20
   125 00000093 58                              		POP		EAX
   126 00000094 61                              		POPAD
   127 00000095 1F                              		POP		DS
   128 00000096 07                              		POP		ES
   129 00000097 CF                              		IRETD
   130 00000098                                 
   131 00000098                                 _asm_inthandler21:
   132 00000098 06                              		PUSH	ES
   133 00000099 1E                              		PUSH	DS
   134 0000009A 60                              		PUSHAD
   135 0000009B 89 E0                           		MOV		EAX,ESP
   136 0000009D 50                              		PUSH	EAX
   137 0000009E 66 8C D0                        		MOV		AX,SS
   138 000000A1 8E D8                           		MOV		DS,AX
   139 000000A3 8E C0                           		MOV		ES,AX
   140 000000A5 E8 [00000000]                   		CALL	_inthandler21
   141 000000AA 58                              		POP		EAX
   142 000000AB 61                              		POPAD
   143 000000AC 1F                              		POP		DS
   144 000000AD 07                              		POP		ES
   145 000000AE CF                              		IRETD
   146 000000AF                                 
   147 000000AF                                 _asm_inthandler27:
   148 000000AF 06                              		PUSH	ES
   149 000000B0 1E                              		PUSH	DS
   150 000000B1 60                              		PUSHAD
   151 000000B2 89 E0                           		MOV		EAX,ESP
   152 000000B4 50                              		PUSH	EAX
   153 000000B5 66 8C D0                        		MOV		AX,SS
   154 000000B8 8E D8                           		MOV		DS,AX
   155 000000BA 8E C0                           		MOV		ES,AX
   156 000000BC E8 [00000000]                   		CALL	_inthandler27
   157 000000C1 58                              		POP		EAX
   158 000000C2 61                              		POPAD
   159 000000C3 1F                              		POP		DS
   160 000000C4 07                              		POP		ES
   161 000000C5 CF                              		IRETD
   162 000000C6                                 
   163 000000C6                                 _asm_inthandler2c:
   164 000000C6 06                              		PUSH	ES
   165 000000C7 1E                              		PUSH	DS
   166 000000C8 60                              		PUSHAD
   167 000000C9 89 E0                           		MOV		EAX,ESP
   168 000000CB 50                              		PUSH	EAX
   169 000000CC 66 8C D0                        		MOV		AX,SS
   170 000000CF 8E D8                           		MOV		DS,AX
   171 000000D1 8E C0                           		MOV		ES,AX
   172 000000D3 E8 [00000000]                   		CALL	_inthandler2c
   173 000000D8 58                              		POP		EAX
   174 000000D9 61                              		POPAD
   175 000000DA 1F                              		POP		DS
   176 000000DB 07                              		POP		ES
   177 000000DC CF                              		IRETD
   178 000000DD                                 
   179 000000DD                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   180 000000DD 57                              		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   181 000000DE 56                              		PUSH	ESI
   182 000000DF 53                              		PUSH	EBX
   183 000000E0 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   184 000000E5 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   185 000000EA 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   186 000000EE                                 mts_loop:
   187 000000EE 89 C3                           		MOV		EBX,EAX
   188 000000F0 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   189 000000F6 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   190 000000F8 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   191 000000FA 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   192 000000FD 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   193 000000FF 75 18                           		JNE		mts_fin
   194 00000101 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   195 00000104 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   196 00000106 75 11                           		JNE		mts_fin
   197 00000108 89 13                           		MOV		[EBX],EDX				; *p = old;
   198 0000010A 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   199 0000010F 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   200 00000113 76 D9                           		JBE		mts_loop
   201 00000115 5B                              		POP		EBX
   202 00000116 5E                              		POP		ESI
   203 00000117 5F                              		POP		EDI
   204 00000118 C3                              		RET
   205 00000119                                 mts_fin:
   206 00000119 89 13                           		MOV		[EBX],EDX				; *p = old;
   207 0000011B 5B                              		POP		EBX
   208 0000011C 5E                              		POP		ESI
   209 0000011D 5F                              		POP		EDI
   210 0000011E C3                              		RET
   211 0000011F                                 
   212 0000011F                                 _farjmp:		; void farjmp(int eip, int cs);
   213 0000011F FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   214 00000123 C3                              		RET
   215 00000124                                 
   216 00000124                                 _farcall:		; void farcall(int eip, int cs);
   217 00000124 FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   218 00000128 C3                              		RET
   219 00000129                                 
   220 00000129                                 _asm_hrb_api:
   221 00000129 FB                              		STI
   222 0000012A 60                              		PUSHAD	; 保存のためのPUSH
   223 0000012B 60                              		PUSHAD	; hrb_apiに渡すためのPUSH
   224 0000012C E8 [00000000]                   		CALL	_hrb_api
   225 00000131 83 C4 20                        		ADD		ESP,32
   226 00000134 61                              		POPAD
   227 00000135 CF                              		IRETD
   228 00000136                                 
